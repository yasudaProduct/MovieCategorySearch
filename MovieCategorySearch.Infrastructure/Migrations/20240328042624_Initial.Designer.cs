// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieCategorySearch.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MovieCategorySearch.Infrastructure.Migrations
{
    [DbContext(typeof(PostgresDbContext))]
    [Migration("20240328042624_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MovieCategorySearch.Infrastructure.Data.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("CreatePgmId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("create_pgm_id");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("create_user_id");

                    b.Property<string>("DeletedFlg")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasDefaultValue("0")
                        .HasColumnName("deleted_flg");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date");

                    b.Property<string>("UpdatePgmId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("update_pgm_id");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.ToTable("category");
                });

            modelBuilder.Entity("MovieCategorySearch.Infrastructure.Data.Entity.CategoryMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("CreatePgmId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("create_pgm_id");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("create_user_id");

                    b.Property<string>("DeletedFlg")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("deleted_flg");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date");

                    b.Property<string>("UpdatePgmId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("update_pgm_id");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MovieId");

                    b.ToTable("category_map");
                });

            modelBuilder.Entity("MovieCategorySearch.Infrastructure.Data.Entity.Movie", b =>
                {
                    b.Property<int>("TmdbMovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tmdb_movie_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TmdbMovieId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("CreatePgmId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("create_pgm_id");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("create_user_id");

                    b.Property<string>("DeletedFlg")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasDefaultValue("0")
                        .HasColumnName("deleted_flg");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date");

                    b.Property<string>("UpdatePgmId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("update_pgm_id");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("update_user_id");

                    b.HasKey("TmdbMovieId");

                    b.ToTable("movie");
                });

            modelBuilder.Entity("MovieCategorySearch.Infrastructure.Data.Entity.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("CreatePgmId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("create_pgm_id");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("create_user_id");

                    b.Property<string>("DeletedFlg")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasDefaultValue("0")
                        .HasColumnName("deleted_flg");

                    b.Property<string>("MailAdress")
                        .IsRequired()
                        .HasMaxLength(319)
                        .HasColumnType("character varying(319)")
                        .HasColumnName("mail_address");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date");

                    b.Property<string>("UpdatePgmId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("update_pgm_id");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("update_user_id");

                    b.Property<string>("UserCls")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("user_cls");

                    b.HasKey("UserId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("MovieCategorySearch.Infrastructure.Data.Entity.Category", b =>
                {
                    b.HasOne("MovieCategorySearch.Infrastructure.Data.Entity.User", "User")
                        .WithMany("Categorys")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieCategorySearch.Infrastructure.Data.Entity.CategoryMap", b =>
                {
                    b.HasOne("MovieCategorySearch.Infrastructure.Data.Entity.Category", "Category")
                        .WithMany("CategoryMaps")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieCategorySearch.Infrastructure.Data.Entity.Movie", "Movie")
                        .WithMany("CategoryMaps")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieCategorySearch.Infrastructure.Data.Entity.Category", b =>
                {
                    b.Navigation("CategoryMaps");
                });

            modelBuilder.Entity("MovieCategorySearch.Infrastructure.Data.Entity.Movie", b =>
                {
                    b.Navigation("CategoryMaps");
                });

            modelBuilder.Entity("MovieCategorySearch.Infrastructure.Data.Entity.User", b =>
                {
                    b.Navigation("Categorys");
                });
#pragma warning restore 612, 618
        }
    }
}
